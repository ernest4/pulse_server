<div>
  <span>Maps: <%= game_state.maps.size %></span>
  <br />
  <% game_state.maps.each do |map_name, map| %>
    <br />
    <div>
      <span>name: <%= map_name %></span>
      <br />
      <span>tiles: <%= map.tiles.to_s %></span>
      <br />
      <span>clients: <%= map.clients.size %></span>
    </div>
  <% end %>
</div>

<script>
  let player_id = null;

  const MESSAGE_TYPE = {
    MOVE: 1,
    POSITION: 2,
    ENTER: 3,
    EXIT: 4,
  }

  const ws = new WebSocket(location.origin.replace('http', 'ws'));
  ws.binaryType = 'arraybuffer';
  ws.onmessage = msg => {
    console.warn(msg);

    console.log('msg.data');
    console.log(msg.data);

    const view = new DataView(msg.data);
    const message_type = view.getUint8(0, true)
    console.log(`message type: ${message_type}`);

    switch(message_type) {
      case 0:
        // TODO:
        break;
      case MESSAGE_TYPE.POSITION:
        const x = view.getUint16(1, true);
        const y = view.getUint16(3, true);
        console.log('x');
        console.log(x);
        console.log('y');
        console.log(y);
        break;
      case MESSAGE_TYPE.ENTER:
        // TODO:

        // normal client will have its own id after log in and other players will be pushed into array...
        player_id = view.getInt32(1, true);

        console.log('decoder utf-8');

        const decoder = new TextDecoder("utf-8");
        const textSlice = msg.data.slice(5 , msg.data.length);
        console.log(decoder.decode(textSlice));
        break;
      case MESSAGE_TYPE.EXIT:
        console.log('exit');
        break;
      default:
        console.log('Unrecognised message type received');
    }
  };

  const sendEnterTest = () => {
    const encoder = new TextEncoder("utf-8");
    const encoded = encoder.encode("Γεια σουκόσμ");

    const buffer = new ArrayBuffer(1 + encoded.length);
    const view = new DataView(buffer);

    encoded.forEach((byte, index) => view.setUint8(index + 1, byte));

    view.setUint8(0, MESSAGE_TYPE.ENTER, true);
    // view.setUint16(2, 500, true);
    console.log('buffer');
    console.log(buffer);

    ws.send(buffer);
  };

  // const sendEnterButton = document.getElementById('send_enter_button');
  // sendEnterButton.addEventListener('click', sendEnterTest);

  const sendMove = ({direction}) => {
    const buffer = new ArrayBuffer(2);
    const view = new DataView(buffer);

    view.setUint8(0, MESSAGE_TYPE.MOVE, true);
    view.setUint8(1, direction, true);

    console.warn('move buffer');
    console.log(buffer);

    ws.send(buffer);
  };

  const keyDownHandler = (event) => {
    switch(event.keyCode){
      case 37: // left 
      case 65: // a
        sendMove({direction: 1});
        break;
      case 38: // up 
      case 87: // w
        sendMove({direction: 3});
        break;
      case 39: // right 
      case 68: // d
        sendMove({direction: 5});
        break;
      case 40: // down
      case 83: // s
        sendMove({direction: 7});
        break;
      default:
        console.log('unrecognised key command');
    }
  }

  document.addEventListener('keydown', keyDownHandler, false);
</script>