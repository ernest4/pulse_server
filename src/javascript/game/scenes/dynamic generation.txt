dynamic generation

utterly dynamically generated textures and animation!
furthermore, phaser allows reading pixel by pixel texture data from loaded images. Thus it's possible
to create an art asset once and manipulate it's texture data to create different colored variations
or really, make any textures you like.

e.g. possible use: read in animation texture, sample all the pixels, create a color change and apply
to all frames. e.g. color character clothing any color you like, in game dynamically (user customization)
and all the animations should update with the new color - only one sprite sheet necessary!

might specifically create sprites with a 'mask' color that the game engine can look for and recognize
as 'variable' color that can have any shade applied?

var config = {
    type: Phaser.CANVAS,
    parent: 'phaser-example',
    width: 800,
    height: 600,
    scene: {
        create: create
    }
};

var game = new Phaser.Game(config);

function create ()
{
    var pixelWidth = 6;
    var pixelHeight = 6;

    var burd = [
      '0123456789ABCDEF',
      '..E.............',
      '.DEEEEEEDDD.....',
      '..EEEEEEDDD.....',
      '..EE00EE77778666',
      '..EEEEEE77777666',
      '..EEEE7777777666',
      '..EEEE7655567666',
      'EEEEEE7777757666',
      'EEEEEEDD555.7666',
      '..DEEEEEDDD.....',
      '..EEEEEEDDD.....',
      '.7EEEEEEDDD.6...',
      '.77EEEEEDDD66...',
      '..77......66....'
    ];

    // var palette = {
    //   E: '#0f0',
    //   B: '#f0f',
    //   D: '#00f'
    // };

    var burd2 = [
      '0123456789ABCDEF',
      '..E.............',
      // '.DEEEEEEDDD.....',
      '..EEEEEEDDD.....',
      '..EE00EE77778666',
      '.',
      '..EEEE7777777666',
      '..EEEE7655567666',
      'EEEEEE7777757666',
      'EEEEEEDD555.7666',
      '..DEEEEEDDD.....',
      '..EEEEEEDDD.....',
      '.7EEEEEEDDD.6...',
      '.77EEEEEDDD66...',
      '..77......66....'
    ];

    var palette2 = {
      E: '#0f0',
      B: '#0f0',
      D: '#f0f'
    };

    this.textures.generate('burd0', { data: burd, pixelWidth });
    this.textures.generate('burd1', { data: burd2, pixelWidth, palette: palette2 });

    // this.add.image(350, 200, 'burd0').setOrigin(0, 1);
    // this.add.sprite(350, 200, 'burd0').setOrigin(0, 1);

    this.anims.create({
        key: 'test_anim',
        frames: [
            { key: 'burd0' },
            { key: 'burd1' },
        ],
        frameRate: 8,
        repeat: -1
    });

    this.add.sprite(350, 200, 'burd0').setOrigin(0, 1).play('test_anim');
}
