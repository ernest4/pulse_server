[DONE][1] TODO: keep game react separate from rest of app view templates.
    - play is the only endpoint that returns react game...
    - rest of app is stimulus + tailwind css
[DONE][2] TODO: Authenticate user and let them create character model (auth after via websocket)
[DONE][3] TODO: make the websocket connection package in JS to connect to Crystal Kemal Pulse
    to execute game commands
[DONE][4] TODO: make the basic movement rendered and playable.
[DONE][4.5] fix joining, leaving and initialization.
[5] TODO: add attacking.
[6] TODO: add environment mod (pick up & place game blocks / bricks)
[7] TODO: specify version info in the game to be shown to users!!


[4.6] TODO: clean up front end a bit, put links to social stuff etc
[4.7] TODO: clean up front end links (NO DEAD LINK!) everything thats present, must work!

[5] TODO: i think there's a memory leak somewhere in back end. I had server up for days and computer
got slow. Once i shut server down speed came back....

[DONE][5] TODO: update to crystal 1.0 !!!!
[DONE][6] TODO: update kemal to 1.0 !!!

[7] GUEST MODE: !!! where player just enters name and plays, but no state is loaded / saved for DB.
Good for people jumping in and trying...

[8] Add referal bonus system https://stackoverflow.com/questions/41311519/simple-referral-system-in-rails

[9] When stress testing server and monitoring, don't just look at server FPS,
look at time for actions to take.
Can have a test object even that is instantiated every frame with a timing function before and after.
If instantiation takes longer to run than usual, can send a warning / alarm etc. (to Rollbar?)



Pivot !!! move back to Node.js back end. Crystal IO is not as fast as uWS, nowhere near! (
even though crystal resource usage might be better than node.js)

Combine the front end code from this repo where appropriate and merge with Node.js code that was using
uWS from another project you had.

Another advantage will be code sharing between front end and back end, especially for state
management & validation.

Make sure to batch as many messages together and send them in big blobs for bandwidth efficiency

TypeScript all the way!

note uWS has TCP_NODELAY enabled (i.e. NAGLE algorithm disabled) by default for max perf! so no
so no need to worry about it.

General JS perf:
use FOR loops over MAP or FOREACH as map is x4 times slower, while foreach is x2 slower.

benchmark uWS with Thor and compare against crystal and raw node.js like here
https://gist.github.com/sdogruyol/bdd400a6eac13e26228e

